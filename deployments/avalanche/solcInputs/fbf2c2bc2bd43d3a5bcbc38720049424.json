{
  "language": "Solidity",
  "sources": {
    "@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {GELATO_RELAY, GELATO_RELAY_ZKSYNC} from \"../constants/GelatoRelay.sol\";\n\nabstract contract GelatoRelayBase {\n    modifier onlyGelatoRelay() {\n        require(_isGelatoRelay(msg.sender), \"onlyGelatoRelay\");\n        _;\n    }\n\n    function _isGelatoRelay(address _forwarder) internal view returns (bool) {\n        return\n            block.chainid == 324 || block.chainid == 280\n                ? _forwarder == GELATO_RELAY_ZKSYNC\n                : _forwarder == GELATO_RELAY;\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/base/GelatoRelayERC2771Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\nimport {\n    GELATO_RELAY_ERC2771,\n    GELATO_RELAY_ERC2771_ZKSYNC\n} from \"../constants/GelatoRelay.sol\";\n\nabstract contract GelatoRelayERC2771Base {\n    modifier onlyGelatoRelayERC2771() {\n        require(_isGelatoRelayERC2771(msg.sender), \"onlyGelatoRelayERC2771\");\n        _;\n    }\n\n    function _isGelatoRelayERC2771(address _forwarder)\n        internal\n        view\n        returns (bool)\n    {\n        // Use another address on zkSync\n        if (block.chainid == 324 || block.chainid == 280) {\n            return _forwarder == GELATO_RELAY_ERC2771_ZKSYNC;\n        }\n        return _forwarder == GELATO_RELAY_ERC2771;\n    }\n}\n"
    },
    "@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.1;\n\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\naddress constant GELATO_RELAY_ERC2771 = 0xb539068872230f20456CF38EC52EF2f91AF4AE49;\n\naddress constant GELATO_RELAY_ZKSYNC = 0xB16a1DbE755f992636705fDbb3A8678a657EB3ea;\naddress constant GELATO_RELAY_ERC2771_ZKSYNC = 0x22DCC39b2AC376862183dd35A1664798dafC7Da6;\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/Forwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ITokenMessenger} from \"./interfaces/ITokenMessenger.sol\";\nimport {IMessageTransmitter} from \"./interfaces/IMessageTransmitter.sol\";\nimport {GelatoRelayContext} from \"./vendor/GelatoRelayContext.sol\";\n\ncontract Forwarder is GelatoRelayContext {\n    IERC20 public immutable token;\n    ITokenMessenger public immutable tokenMessenger;\n    IMessageTransmitter public immutable messageTransmitter;\n\n    constructor(\n        IERC20 _token,\n        ITokenMessenger _tokenMessenger,\n        IMessageTransmitter _messageTransmitter\n    ) {\n        token = _token;\n        tokenMessenger = _tokenMessenger;\n        messageTransmitter = _messageTransmitter;\n    }\n\n    function deposit(\n        uint256 maxFee,\n        uint32 destinationDomain,\n        bytes calldata receiveAuthorization\n    ) external onlyGelatoRelayERC2771 {\n        _receiveWithAuthorization(receiveAuthorization);\n        _transferRelayFeeCappedERC2771(maxFee);\n\n        bytes32 owner = abi.decode(receiveAuthorization, (bytes32));\n        uint256 remaining = token.balanceOf(address(this));\n\n        token.approve(address(tokenMessenger), remaining);\n\n        tokenMessenger.depositForBurn(\n            remaining,\n            destinationDomain,\n            owner,\n            address(token)\n        );\n    }\n\n    function withdraw(\n        bytes calldata message,\n        bytes calldata attestation,\n        bytes calldata receiveAuthorization\n    ) external onlyGelatoRelay {\n        messageTransmitter.receiveMessage(message, attestation);\n\n        _receiveWithAuthorization(receiveAuthorization);\n        _transferRelayFee();\n\n        address owner = abi.decode(receiveAuthorization, (address));\n        uint256 remaining = token.balanceOf(address(this));\n\n        token.transfer(owner, remaining);\n    }\n\n    function _receiveWithAuthorization(bytes calldata authorization) internal {\n        _requireCall(\n            address(token),\n            abi.encodePacked(bytes4(0xef55bec6), authorization)\n        );\n    }\n\n    function _requireCall(address target, bytes memory data) internal {\n        (bool success, bytes memory result) = address(target).call(data);\n        assembly {\n            if eq(success, false) {\n                revert(add(result, 32), mload(result))\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IMessageTransmitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IMessageTransmitter {\r\n    function receiveMessage(\r\n        bytes calldata message,\r\n        bytes calldata attestation\r\n    ) external returns (bool success);\r\n}\r\n"
    },
    "contracts/interfaces/ITokenMessenger.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface ITokenMessenger {\r\n    function depositForBurn(\r\n        uint256 amount,\r\n        uint32 destinationDomain,\r\n        bytes32 mintRecipient,\r\n        address burnToken\r\n    ) external returns (uint64 nonce);\r\n}\r\n"
    },
    "contracts/vendor/GelatoRelayContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {\r\n    GelatoRelayBase\r\n} from \"@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol\";\r\nimport {\r\n    GelatoRelayERC2771Base\r\n} from \"@gelatonetwork/relay-context/contracts/base/GelatoRelayERC2771Base.sol\";\r\n\r\nuint256 constant _ERC2771_FEE_COLLECTOR_START = 92;\r\nuint256 constant _ERC2771_FEE_TOKEN_START = 72;\r\nuint256 constant _ERC2771_FEE_START = 52;\r\n\r\nuint256 constant _FEE_COLLECTOR_START = 72;\r\nuint256 constant _FEE_TOKEN_START = 52;\r\nuint256 constant _FEE_START = 32;\r\n\r\n// solhint-disable-next-line private-vars-leading-underscore\r\nfunction _getFeeCollectorRelayContextERC2771()\r\n    pure\r\n    returns (address feeCollector)\r\n{\r\n    assembly {\r\n        feeCollector := shr(\r\n            96,\r\n            calldataload(sub(calldatasize(), _ERC2771_FEE_COLLECTOR_START))\r\n        )\r\n    }\r\n}\r\n\r\n// solhint-disable-next-line private-vars-leading-underscore\r\nfunction _getFeeTokenRelayContextERC2771() pure returns (address feeToken) {\r\n    assembly {\r\n        feeToken := shr(96, calldataload(sub(calldatasize(), _ERC2771_FEE_TOKEN_START)))\r\n    }\r\n}\r\n\r\n// solhint-disable-next-line private-vars-leading-underscore\r\nfunction _getFeeRelayContextERC2771() pure returns (uint256 fee) {\r\n    assembly {\r\n        fee := calldataload(sub(calldatasize(), _ERC2771_FEE_START))\r\n    }\r\n}\r\n\r\n// solhint-disable-next-line private-vars-leading-underscore\r\nfunction _getFeeCollectorRelayContext() pure returns (address feeCollector) {\r\n    assembly {\r\n        feeCollector := shr(\r\n            96,\r\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\r\n        )\r\n    }\r\n}\r\n\r\n// solhint-disable-next-line private-vars-leading-underscore\r\nfunction _getFeeTokenRelayContext() pure returns (address feeToken) {\r\n    assembly {\r\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\r\n    }\r\n}\r\n\r\n// solhint-disable-next-line private-vars-leading-underscore\r\nfunction _getFeeRelayContext() pure returns (uint256 fee) {\r\n    assembly {\r\n        fee := calldataload(sub(calldatasize(), _FEE_START))\r\n    }\r\n}\r\n\r\nabstract contract GelatoRelayContext is GelatoRelayBase, GelatoRelayERC2771Base {\r\n    function _transferRelayFee() internal {\r\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\r\n    }\r\n\r\n    function _transferRelayFeeERC2771() internal {\r\n        _getFeeTokenERC2771().transfer(_getFeeCollectorERC2771(), _getFeeERC2771());\r\n    }\r\n\r\n    function _transferRelayFeeCapped(uint256 maxFee) internal {\r\n        uint256 fee = _getFee();\r\n        require(\r\n            fee <= maxFee,\r\n            \"GelatoRelayContext._transferRelayFeeCapped: maxFee\"\r\n        );\r\n        _getFeeToken().transfer(_getFeeCollector(), fee);\r\n    }\r\n\r\n    function _transferRelayFeeCappedERC2771(uint256 maxFee) internal {\r\n        uint256 fee = _getFeeERC2771();\r\n        require(\r\n            fee <= maxFee,\r\n            \"GelatoRelayContext._transferRelayFeeCappedERC2771: maxFee\"\r\n        );\r\n        _getFeeTokenERC2771().transfer(_getFeeCollectorERC2771(), fee);\r\n    }\r\n\r\n    function _getFeeCollectorERC2771() internal pure returns (address) {\r\n        return _getFeeCollectorRelayContextERC2771();\r\n    }\r\n\r\n    function _getFeeTokenERC2771() internal pure returns (IERC20) {\r\n        return IERC20(_getFeeTokenRelayContextERC2771());\r\n    }\r\n\r\n    function _getFeeERC2771() internal pure returns (uint256) {\r\n        return _getFeeRelayContextERC2771();\r\n    }\r\n\r\n    function _getFeeCollector() internal pure returns (address) {\r\n        return _getFeeCollectorRelayContext();\r\n    }\r\n\r\n    function _getFeeToken() internal pure returns (IERC20) {\r\n        return IERC20(_getFeeTokenRelayContext());\r\n    }\r\n\r\n    function _getFee() internal pure returns (uint256) {\r\n        return _getFeeRelayContext();\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}

{
  "address": "0x9980C80596ccD0Fcb6EB578905400054a3320da9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract ITokenMessenger",
          "name": "_tokenMessenger",
          "type": "address"
        },
        {
          "internalType": "contract IMessageTransmitter",
          "name": "_messageTransmitter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "receiveAuthorization",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageTransmitter",
      "outputs": [
        {
          "internalType": "contract IMessageTransmitter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenMessenger",
      "outputs": [
        {
          "internalType": "contract ITokenMessenger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "attestation",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "receiveAuthorization",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3221cb83da04ac616a2735a5c02c163d6be3db2c834aa4e336d906d00f244fca",
  "receipt": {
    "to": null,
    "from": "0x92e94967A976610D27267273935De71B791f0037",
    "contractAddress": "0x9980C80596ccD0Fcb6EB578905400054a3320da9",
    "transactionIndex": 1,
    "gasUsed": "7509893",
    "logsBloom": "0x
    "blockHash": "0x2214f28b87b46750d1b8d1f632f05384edabb702c986667c61d7be17ed4d240b",
    "transactionHash": "0x3221cb83da04ac616a2735a5c02c163d6be3db2c834aa4e336d906d00f244fca",
    "logs": [],
    "blockNumber": 120294734,
    "cumulativeGasUsed": "7509893",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
    "0x19330d10D9Cc8751218eaf51E8885D058642E08A",
    "0xC30362313FBBA5cf9163F0bb16a0e01f01A896ca"
  ],
  "numDeployments": 4,
  "solcInputHash": "d8af79798f37e466fa450a251efcde65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract ITokenMessenger\",\"name\":\"_tokenMessenger\",\"type\":\"address\"},{\"internalType\":\"contract IMessageTransmitter\",\"name\":\"_messageTransmitter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"receiveAuthorization\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageTransmitter\",\"outputs\":[{\"internalType\":\"contract IMessageTransmitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMessenger\",\"outputs\":[{\"internalType\":\"contract ITokenMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receiveAuthorization\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Forwarder.sol\":\"Forwarder\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GELATO_RELAY, GELATO_RELAY_ZKSYNC} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayBase {\\n    modifier onlyGelatoRelay() {\\n        require(_isGelatoRelay(msg.sender), \\\"onlyGelatoRelay\\\");\\n        _;\\n    }\\n\\n    function _isGelatoRelay(address _forwarder) internal view returns (bool) {\\n        return\\n            block.chainid == 324 || block.chainid == 280\\n                ? _forwarder == GELATO_RELAY_ZKSYNC\\n                : _forwarder == GELATO_RELAY;\\n    }\\n}\\n\",\"keccak256\":\"0x033fece9013a13dfc2165c8b9f474d0da6363741314a726d670507443131d2ab\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/base/GelatoRelayERC2771Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {\\n    GELATO_RELAY_ERC2771,\\n    GELATO_RELAY_ERC2771_ZKSYNC\\n} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayERC2771Base {\\n    modifier onlyGelatoRelayERC2771() {\\n        require(_isGelatoRelayERC2771(msg.sender), \\\"onlyGelatoRelayERC2771\\\");\\n        _;\\n    }\\n\\n    function _isGelatoRelayERC2771(address _forwarder)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        // Use another address on zkSync\\n        if (block.chainid == 324 || block.chainid == 280) {\\n            return _forwarder == GELATO_RELAY_ERC2771_ZKSYNC;\\n        }\\n        return _forwarder == GELATO_RELAY_ERC2771;\\n    }\\n}\\n\",\"keccak256\":\"0x215b9061abf2a71ae3dc68acea61ac922dd5c0e9bd9a25bca06f1f28d43f5935\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\\naddress constant GELATO_RELAY_ERC2771 = 0xb539068872230f20456CF38EC52EF2f91AF4AE49;\\n\\naddress constant GELATO_RELAY_ZKSYNC = 0xB16a1DbE755f992636705fDbb3A8678a657EB3ea;\\naddress constant GELATO_RELAY_ERC2771_ZKSYNC = 0x22DCC39b2AC376862183dd35A1664798dafC7Da6;\\n\",\"keccak256\":\"0x545518e60f19e6d57eedbc861b861321e9face2ec3fa095a539cb4f784ac4ab0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Forwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ITokenMessenger} from \\\"./interfaces/ITokenMessenger.sol\\\";\\nimport {IMessageTransmitter} from \\\"./interfaces/IMessageTransmitter.sol\\\";\\nimport {GelatoRelayContext} from \\\"./vendor/GelatoRelayContext.sol\\\";\\n\\ncontract Forwarder is GelatoRelayContext {\\n    IERC20 public immutable token;\\n    ITokenMessenger public immutable tokenMessenger;\\n    IMessageTransmitter public immutable messageTransmitter;\\n\\n    constructor(\\n        IERC20 _token,\\n        ITokenMessenger _tokenMessenger,\\n        IMessageTransmitter _messageTransmitter\\n    ) {\\n        token = _token;\\n        tokenMessenger = _tokenMessenger;\\n        messageTransmitter = _messageTransmitter;\\n    }\\n\\n    function deposit(\\n        uint256 maxFee,\\n        uint32 destinationDomain,\\n        bytes calldata receiveAuthorization\\n    ) external onlyGelatoRelayERC2771 {\\n        _requireSelector(receiveAuthorization, Forwarder.deposit.selector);\\n\\n        address owner = _decodeOwner(receiveAuthorization);\\n        require(\\n            _getMsgSender() == owner,\\n            \\\"Forwarder.deposit: signer must be authorizer\\\"\\n        );\\n\\n        _receiveWithAuthorization(receiveAuthorization);\\n        _transferRelayFeeCappedERC2771(maxFee);\\n\\n        uint256 remaining = token.balanceOf(address(this));\\n        token.approve(address(tokenMessenger), remaining);\\n\\n        tokenMessenger.depositForBurn(\\n            remaining,\\n            destinationDomain,\\n            _addressToBytes32(owner),\\n            address(token)\\n        );\\n    }\\n\\n    function withdraw(\\n        bytes calldata message,\\n        bytes calldata attestation,\\n        bytes calldata receiveAuthorization\\n    ) external onlyGelatoRelay {\\n        _requireSelector(receiveAuthorization, Forwarder.withdraw.selector);\\n\\n        messageTransmitter.receiveMessage(message, attestation);\\n\\n        _receiveWithAuthorization(receiveAuthorization);\\n        _transferRelayFee();\\n\\n        address owner = _decodeOwner(receiveAuthorization);\\n        uint256 remaining = token.balanceOf(address(this));\\n\\n        token.transfer(owner, remaining);\\n    }\\n\\n    function _receiveWithAuthorization(bytes calldata authorization) internal {\\n        _requireCall(\\n            address(token),\\n            abi.encodePacked(bytes4(0xef55bec6), authorization)\\n        );\\n    }\\n\\n    function _requireCall(address target, bytes memory data) internal {\\n        (bool success, bytes memory result) = address(target).call(data);\\n        assembly {\\n            if eq(success, false) {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    function _requireSelector(\\n        bytes calldata authorization,\\n        bytes4 selector\\n    ) internal pure {\\n        bytes4 nonceSelector = bytes4(authorization[160:164]);\\n        require (\\n            nonceSelector == selector,\\n            \\\"Forwarder._requireSelector: invalid selector\\\"\\n        );\\n    }\\n\\n    function _decodeOwner(\\n        bytes calldata authorization\\n    ) internal pure returns (address) {\\n        return address(uint160(uint256(bytes32(authorization))));\\n    }\\n\\n    function _addressToBytes32(address addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(addr)));\\n    }\\n}\\n\",\"keccak256\":\"0xafb096fe2611ef16f5feef9bbbb487e8d29ea6a9ab53d2dfb62486cb36893f44\",\"license\":\"MIT\"},\"contracts/interfaces/IMessageTransmitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IMessageTransmitter {\\r\\n    function receiveMessage(\\r\\n        bytes calldata message,\\r\\n        bytes calldata attestation\\r\\n    ) external returns (bool success);\\r\\n}\\r\\n\",\"keccak256\":\"0x310ebefca0b0e6de21dd4f4cce758f97443ef46fbc9e249ee65273faebbee0a3\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface ITokenMessenger {\\r\\n    function depositForBurn(\\r\\n        uint256 amount,\\r\\n        uint32 destinationDomain,\\r\\n        bytes32 mintRecipient,\\r\\n        address burnToken\\r\\n    ) external returns (uint64 nonce);\\r\\n}\\r\\n\",\"keccak256\":\"0x647e97803306830b8ffe81103778e1b503c140eb5145e2aca74ffed9e0ff89cc\",\"license\":\"MIT\"},\"contracts/vendor/GelatoRelayContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    GelatoRelayBase\\n} from \\\"@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol\\\";\\nimport {\\n    GelatoRelayERC2771Base\\n} from \\\"@gelatonetwork/relay-context/contracts/base/GelatoRelayERC2771Base.sol\\\";\\n\\nuint256 constant _ERC2771_FEE_COLLECTOR_START = 92;\\nuint256 constant _ERC2771_FEE_TOKEN_START = 72;\\nuint256 constant _ERC2771_FEE_START = 52;\\nuint256 constant _ERC2771_MSG_SENDER_START = 20;\\n\\nuint256 constant _FEE_COLLECTOR_START = 72;\\nuint256 constant _FEE_TOKEN_START = 52;\\nuint256 constant _FEE_START = 32;\\n\\n// solhint-disable-next-line private-vars-leading-underscore\\nfunction _getFeeCollectorRelayContextERC2771()\\n    pure\\n    returns (address feeCollector)\\n{\\n    assembly {\\n        feeCollector := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _ERC2771_FEE_COLLECTOR_START))\\n        )\\n    }\\n}\\n\\n// solhint-disable-next-line private-vars-leading-underscore\\nfunction _getFeeTokenRelayContextERC2771() pure returns (address feeToken) {\\n    assembly {\\n        feeToken := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _ERC2771_FEE_TOKEN_START))\\n        )\\n    }\\n}\\n\\n// solhint-disable-next-line private-vars-leading-underscore\\nfunction _getFeeRelayContextERC2771() pure returns (uint256 fee) {\\n    assembly {\\n        fee := calldataload(sub(calldatasize(), _ERC2771_FEE_START))\\n    }\\n}\\n\\n// solhint-disable-next-line private-vars-leading-underscore\\nfunction _getMsgSenderRelayContextERC2771() pure returns (address _msgSender) {\\n    assembly {\\n        _msgSender := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _ERC2771_MSG_SENDER_START))\\n        )\\n    }\\n}\\n\\n// solhint-disable-next-line private-vars-leading-underscore\\nfunction _getFeeCollectorRelayContext() pure returns (address feeCollector) {\\n    assembly {\\n        feeCollector := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\\n        )\\n    }\\n}\\n\\n// solhint-disable-next-line private-vars-leading-underscore\\nfunction _getFeeTokenRelayContext() pure returns (address feeToken) {\\n    assembly {\\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\\n    }\\n}\\n\\n// solhint-disable-next-line private-vars-leading-underscore\\nfunction _getFeeRelayContext() pure returns (uint256 fee) {\\n    assembly {\\n        fee := calldataload(sub(calldatasize(), _FEE_START))\\n    }\\n}\\n\\nabstract contract GelatoRelayContext is\\n    GelatoRelayBase,\\n    GelatoRelayERC2771Base\\n{\\n    function _transferRelayFee() internal {\\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\\n    }\\n\\n    function _transferRelayFeeERC2771() internal {\\n        _getFeeTokenERC2771().transfer(\\n            _getFeeCollectorERC2771(),\\n            _getFeeERC2771()\\n        );\\n    }\\n\\n    function _transferRelayFeeCapped(uint256 maxFee) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= maxFee,\\n            \\\"GelatoRelayContext._transferRelayFeeCapped: maxFee\\\"\\n        );\\n        _getFeeToken().transfer(_getFeeCollector(), fee);\\n    }\\n\\n    function _transferRelayFeeCappedERC2771(uint256 maxFee) internal {\\n        uint256 fee = _getFeeERC2771();\\n        require(\\n            fee <= maxFee,\\n            \\\"GelatoRelayContext._transferRelayFeeCappedERC2771: maxFee\\\"\\n        );\\n        _getFeeTokenERC2771().transfer(_getFeeCollectorERC2771(), fee);\\n    }\\n\\n    function _getMsgSender() internal view virtual returns (address) {\\n        return\\n            _isGelatoRelayERC2771(msg.sender)\\n                ? _getMsgSenderRelayContextERC2771()\\n                : msg.sender;\\n    }\\n\\n    function _getFeeCollectorERC2771() internal pure returns (address) {\\n        return _getFeeCollectorRelayContextERC2771();\\n    }\\n\\n    function _getFeeTokenERC2771() internal pure returns (IERC20) {\\n        return IERC20(_getFeeTokenRelayContextERC2771());\\n    }\\n\\n    function _getFeeERC2771() internal pure returns (uint256) {\\n        return _getFeeRelayContextERC2771();\\n    }\\n\\n    function _getFeeCollector() internal pure returns (address) {\\n        return _getFeeCollectorRelayContext();\\n    }\\n\\n    function _getFeeToken() internal pure returns (IERC20) {\\n        return IERC20(_getFeeTokenRelayContext());\\n    }\\n\\n    function _getFee() internal pure returns (uint256) {\\n        return _getFeeRelayContext();\\n    }\\n}\\n\",\"keccak256\":\"0xdfcebda88659620c530325b6258e13486ae8f71255a6ed903502773bd698207b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620019b9380380620019b98339818101604052810190620000379190620001e4565b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050505062000240565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010e82620000e1565b9050919050565b6000620001228262000101565b9050919050565b620001348162000115565b81146200014057600080fd5b50565b600081519050620001548162000129565b92915050565b6000620001678262000101565b9050919050565b62000179816200015a565b81146200018557600080fd5b50565b60008151905062000199816200016e565b92915050565b6000620001ac8262000101565b9050919050565b620001be816200019f565b8114620001ca57600080fd5b50565b600081519050620001de81620001b3565b92915050565b6000806000606084860312156200020057620001ff620000dc565b5b6000620002108682870162000143565b9350506020620002238682870162000188565b92505060406200023686828701620001cd565b9150509250925092565b60805160a05160c05161170b620002ae6000396000818161011401526104b201526000818160f001528181610302015261038501526000818161022a015281816102c6015281816103cc0152818161057701528181610613015281816106bc0152610876015261170b6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063461178301461005c5780637b04c1811461007a5780639b94f9a114610098578063d0f48715146100b4578063fc0c546a146100d0575b600080fd5b6100646100ee565b6040516100719190610ccd565b60405180910390f35b610082610112565b60405161008f9190610d09565b60405180910390f35b6100b260048036038101906100ad9190610e05565b610136565b005b6100ce60048036038101906100c99190610e79565b610456565b005b6100d86106ba565b6040516100e59190610f4e565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b61013f336106de565b61017e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017590610fc6565b60405180910390fd5b6101908282639b94f9a160e01b61078b565b600061019c8383610834565b90508073ffffffffffffffffffffffffffffffffffffffff166101bd61084e565b73ffffffffffffffffffffffffffffffffffffffff1614610213576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020a90611058565b60405180910390fd5b61021d8383610871565b610226856108c9565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102819190611099565b602060405180830381865afa15801561029e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c291906110c9565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040161033f929190611105565b6020604051808303816000875af115801561035e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103829190611166565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636fd3504e82876103ca866109a9565b7f00000000000000000000000000000000000000000000000000000000000000006040518563ffffffff1660e01b815260040161040a94939291906111bb565b6020604051808303816000875af1158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190611240565b50505050505050565b61045f336109cc565b61049e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610495906112b9565b60405180910390fd5b6104b0828263d0f4871560e01b61078b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166357ecfd28878787876040518563ffffffff1660e01b815260040161050f9493929190611337565b6020604051808303816000875af115801561052e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105529190611166565b5061055d8282610871565b610565610a76565b60006105718383610834565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105ce9190611099565b602060405180830381865afa1580156105eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060f91906110c9565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161066c929190611105565b6020604051808303816000875af115801561068b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106af9190611166565b505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006101444614806106f1575061011846145b15610740577322dcc39b2ac376862183dd35a1664798dafc7da673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050610786565b73b539068872230f20456cf38ec52ef2f91af4ae4973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161490505b919050565b6000838360a09060a4926107a19392919061137c565b906107ac91906113fb565b9050817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461082e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610825906114cc565b60405180910390fd5b50505050565b600082829061084391906114ec565b60001c905092915050565b6000610859336106de565b610863573361086c565b61086b610b0c565b5b905090565b6108c57f000000000000000000000000000000000000000000000000000000000000000063ef55bec660e01b84846040516020016108b19392919061159c565b604051602081830303815290604052610b1b565b5050565b60006108d3610ba0565b905081811115610918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090f90611638565b60405180910390fd5b610920610baf565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610943610bbe565b836040518363ffffffff1660e01b8152600401610961929190611105565b6020604051808303816000875af1158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a49190611166565b505050565b60008173ffffffffffffffffffffffffffffffffffffffff1660001b9050919050565b60006101444614806109df575061011846145b610a2b5773abcc9b596420a9e9172fd5938620e265a0f9df9273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610a6f565b73b16a1dbe755f992636705fdbb3a8678a657eb3ea73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b610a7e610bcd565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610aa1610bdc565b610aa9610beb565b6040518363ffffffff1660e01b8152600401610ac6929190611105565b6020604051808303816000875af1158015610ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b099190611166565b50565b6000601436033560601c905090565b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051610b4391906116be565b6000604051808303816000865af19150503d8060008114610b80576040519150601f19603f3d011682016040523d82523d6000602084013e610b85565b606091505b509150915060008203610b9a57805160208201fd5b50505050565b6000610baa610bfa565b905090565b6000610bb9610c06565b905090565b6000610bc8610c15565b905090565b6000610bd7610c24565b905090565b6000610be6610c33565b905090565b6000610bf5610c42565b905090565b60006034360335905090565b6000604836033560601c905090565b6000605c36033560601c905090565b6000603436033560601c905090565b6000604836033560601c905090565b60006020360335905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c93610c8e610c8984610c4e565b610c6e565b610c4e565b9050919050565b6000610ca582610c78565b9050919050565b6000610cb782610c9a565b9050919050565b610cc781610cac565b82525050565b6000602082019050610ce26000830184610cbe565b92915050565b6000610cf382610c9a565b9050919050565b610d0381610ce8565b82525050565b6000602082019050610d1e6000830184610cfa565b92915050565b600080fd5b600080fd5b6000819050919050565b610d4181610d2e565b8114610d4c57600080fd5b50565b600081359050610d5e81610d38565b92915050565b600063ffffffff82169050919050565b610d7d81610d64565b8114610d8857600080fd5b50565b600081359050610d9a81610d74565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610dc557610dc4610da0565b5b8235905067ffffffffffffffff811115610de257610de1610da5565b5b602083019150836001820283011115610dfe57610dfd610daa565b5b9250929050565b60008060008060608587031215610e1f57610e1e610d24565b5b6000610e2d87828801610d4f565b9450506020610e3e87828801610d8b565b935050604085013567ffffffffffffffff811115610e5f57610e5e610d29565b5b610e6b87828801610daf565b925092505092959194509250565b60008060008060008060608789031215610e9657610e95610d24565b5b600087013567ffffffffffffffff811115610eb457610eb3610d29565b5b610ec089828a01610daf565b9650965050602087013567ffffffffffffffff811115610ee357610ee2610d29565b5b610eef89828a01610daf565b9450945050604087013567ffffffffffffffff811115610f1257610f11610d29565b5b610f1e89828a01610daf565b92509250509295509295509295565b6000610f3882610c9a565b9050919050565b610f4881610f2d565b82525050565b6000602082019050610f636000830184610f3f565b92915050565b600082825260208201905092915050565b7f6f6e6c7947656c61746f52656c61794552433237373100000000000000000000600082015250565b6000610fb0601683610f69565b9150610fbb82610f7a565b602082019050919050565b60006020820190508181036000830152610fdf81610fa3565b9050919050565b7f466f727761726465722e6465706f7369743a207369676e6572206d757374206260008201527f6520617574686f72697a65720000000000000000000000000000000000000000602082015250565b6000611042602c83610f69565b915061104d82610fe6565b604082019050919050565b6000602082019050818103600083015261107181611035565b9050919050565b600061108382610c4e565b9050919050565b61109381611078565b82525050565b60006020820190506110ae600083018461108a565b92915050565b6000815190506110c381610d38565b92915050565b6000602082840312156110df576110de610d24565b5b60006110ed848285016110b4565b91505092915050565b6110ff81610d2e565b82525050565b600060408201905061111a600083018561108a565b61112760208301846110f6565b9392505050565b60008115159050919050565b6111438161112e565b811461114e57600080fd5b50565b6000815190506111608161113a565b92915050565b60006020828403121561117c5761117b610d24565b5b600061118a84828501611151565b91505092915050565b61119c81610d64565b82525050565b6000819050919050565b6111b5816111a2565b82525050565b60006080820190506111d060008301876110f6565b6111dd6020830186611193565b6111ea60408301856111ac565b6111f7606083018461108a565b95945050505050565b600067ffffffffffffffff82169050919050565b61121d81611200565b811461122857600080fd5b50565b60008151905061123a81611214565b92915050565b60006020828403121561125657611255610d24565b5b60006112648482850161122b565b91505092915050565b7f6f6e6c7947656c61746f52656c61790000000000000000000000000000000000600082015250565b60006112a3600f83610f69565b91506112ae8261126d565b602082019050919050565b600060208201905081810360008301526112d281611296565b9050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061131683856112d9565b93506113238385846112ea565b61132c836112f9565b840190509392505050565b6000604082019050818103600083015261135281868861130a565b9050818103602083015261136781848661130a565b905095945050505050565b600080fd5b600080fd5b600080858511156113905761138f611372565b5b838611156113a1576113a0611377565b5b6001850283019150848603905094509492505050565b600082905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600082821b905092915050565b600061140783836113b7565b8261141281356113c2565b925060048210156114525761144d7fffffffff00000000000000000000000000000000000000000000000000000000836004036008026113ee565b831692505b505092915050565b7f466f727761726465722e5f7265717569726553656c6563746f723a20696e766160008201527f6c69642073656c6563746f720000000000000000000000000000000000000000602082015250565b60006114b6602c83610f69565b91506114c18261145a565b604082019050919050565b600060208201905081810360008301526114e5816114a9565b9050919050565b60006114f883836113b7565b8261150381356111a2565b925060208210156115435761153e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836020036008026113ee565b831692505b505092915050565b6000819050919050565b611566611561826113c2565b61154b565b82525050565b600081905092915050565b6000611583838561156c565b93506115908385846112ea565b82840190509392505050565b60006115a88286611555565b6004820191506115b9828486611577565b9150819050949350505050565b7f47656c61746f52656c6179436f6e746578742e5f7472616e7366657252656c6160008201527f79466565436170706564455243323737313a206d617846656500000000000000602082015250565b6000611622603983610f69565b915061162d826115c6565b604082019050919050565b6000602082019050818103600083015261165181611615565b9050919050565b600081519050919050565b60005b83811015611681578082015181840152602081019050611666565b60008484015250505050565b600061169882611658565b6116a2818561156c565b93506116b2818560208601611663565b80840191505092915050565b60006116ca828461168d565b91508190509291505056fea264697066735822122072dc4d4b09a80741604e9f0b951a695c8ddfd87f4cf0be0f72491b056f35a26964736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063461178301461005c5780637b04c1811461007a5780639b94f9a114610098578063d0f48715146100b4578063fc0c546a146100d0575b600080fd5b6100646100ee565b6040516100719190610ccd565b60405180910390f35b610082610112565b60405161008f9190610d09565b60405180910390f35b6100b260048036038101906100ad9190610e05565b610136565b005b6100ce60048036038101906100c99190610e79565b610456565b005b6100d86106ba565b6040516100e59190610f4e565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b61013f336106de565b61017e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017590610fc6565b60405180910390fd5b6101908282639b94f9a160e01b61078b565b600061019c8383610834565b90508073ffffffffffffffffffffffffffffffffffffffff166101bd61084e565b73ffffffffffffffffffffffffffffffffffffffff1614610213576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020a90611058565b60405180910390fd5b61021d8383610871565b610226856108c9565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102819190611099565b602060405180830381865afa15801561029e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c291906110c9565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040161033f929190611105565b6020604051808303816000875af115801561035e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103829190611166565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636fd3504e82876103ca866109a9565b7f00000000000000000000000000000000000000000000000000000000000000006040518563ffffffff1660e01b815260040161040a94939291906111bb565b6020604051808303816000875af1158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190611240565b50505050505050565b61045f336109cc565b61049e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610495906112b9565b60405180910390fd5b6104b0828263d0f4871560e01b61078b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166357ecfd28878787876040518563ffffffff1660e01b815260040161050f9493929190611337565b6020604051808303816000875af115801561052e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105529190611166565b5061055d8282610871565b610565610a76565b60006105718383610834565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105ce9190611099565b602060405180830381865afa1580156105eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060f91906110c9565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161066c929190611105565b6020604051808303816000875af115801561068b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106af9190611166565b505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006101444614806106f1575061011846145b15610740577322dcc39b2ac376862183dd35a1664798dafc7da673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050610786565b73b539068872230f20456cf38ec52ef2f91af4ae4973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161490505b919050565b6000838360a09060a4926107a19392919061137c565b906107ac91906113fb565b9050817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461082e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610825906114cc565b60405180910390fd5b50505050565b600082829061084391906114ec565b60001c905092915050565b6000610859336106de565b610863573361086c565b61086b610b0c565b5b905090565b6108c57f000000000000000000000000000000000000000000000000000000000000000063ef55bec660e01b84846040516020016108b19392919061159c565b604051602081830303815290604052610b1b565b5050565b60006108d3610ba0565b905081811115610918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090f90611638565b60405180910390fd5b610920610baf565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610943610bbe565b836040518363ffffffff1660e01b8152600401610961929190611105565b6020604051808303816000875af1158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a49190611166565b505050565b60008173ffffffffffffffffffffffffffffffffffffffff1660001b9050919050565b60006101444614806109df575061011846145b610a2b5773abcc9b596420a9e9172fd5938620e265a0f9df9273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610a6f565b73b16a1dbe755f992636705fdbb3a8678a657eb3ea73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b610a7e610bcd565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610aa1610bdc565b610aa9610beb565b6040518363ffffffff1660e01b8152600401610ac6929190611105565b6020604051808303816000875af1158015610ae5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b099190611166565b50565b6000601436033560601c905090565b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051610b4391906116be565b6000604051808303816000865af19150503d8060008114610b80576040519150601f19603f3d011682016040523d82523d6000602084013e610b85565b606091505b509150915060008203610b9a57805160208201fd5b50505050565b6000610baa610bfa565b905090565b6000610bb9610c06565b905090565b6000610bc8610c15565b905090565b6000610bd7610c24565b905090565b6000610be6610c33565b905090565b6000610bf5610c42565b905090565b60006034360335905090565b6000604836033560601c905090565b6000605c36033560601c905090565b6000603436033560601c905090565b6000604836033560601c905090565b60006020360335905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c93610c8e610c8984610c4e565b610c6e565b610c4e565b9050919050565b6000610ca582610c78565b9050919050565b6000610cb782610c9a565b9050919050565b610cc781610cac565b82525050565b6000602082019050610ce26000830184610cbe565b92915050565b6000610cf382610c9a565b9050919050565b610d0381610ce8565b82525050565b6000602082019050610d1e6000830184610cfa565b92915050565b600080fd5b600080fd5b6000819050919050565b610d4181610d2e565b8114610d4c57600080fd5b50565b600081359050610d5e81610d38565b92915050565b600063ffffffff82169050919050565b610d7d81610d64565b8114610d8857600080fd5b50565b600081359050610d9a81610d74565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610dc557610dc4610da0565b5b8235905067ffffffffffffffff811115610de257610de1610da5565b5b602083019150836001820283011115610dfe57610dfd610daa565b5b9250929050565b60008060008060608587031215610e1f57610e1e610d24565b5b6000610e2d87828801610d4f565b9450506020610e3e87828801610d8b565b935050604085013567ffffffffffffffff811115610e5f57610e5e610d29565b5b610e6b87828801610daf565b925092505092959194509250565b60008060008060008060608789031215610e9657610e95610d24565b5b600087013567ffffffffffffffff811115610eb457610eb3610d29565b5b610ec089828a01610daf565b9650965050602087013567ffffffffffffffff811115610ee357610ee2610d29565b5b610eef89828a01610daf565b9450945050604087013567ffffffffffffffff811115610f1257610f11610d29565b5b610f1e89828a01610daf565b92509250509295509295509295565b6000610f3882610c9a565b9050919050565b610f4881610f2d565b82525050565b6000602082019050610f636000830184610f3f565b92915050565b600082825260208201905092915050565b7f6f6e6c7947656c61746f52656c61794552433237373100000000000000000000600082015250565b6000610fb0601683610f69565b9150610fbb82610f7a565b602082019050919050565b60006020820190508181036000830152610fdf81610fa3565b9050919050565b7f466f727761726465722e6465706f7369743a207369676e6572206d757374206260008201527f6520617574686f72697a65720000000000000000000000000000000000000000602082015250565b6000611042602c83610f69565b915061104d82610fe6565b604082019050919050565b6000602082019050818103600083015261107181611035565b9050919050565b600061108382610c4e565b9050919050565b61109381611078565b82525050565b60006020820190506110ae600083018461108a565b92915050565b6000815190506110c381610d38565b92915050565b6000602082840312156110df576110de610d24565b5b60006110ed848285016110b4565b91505092915050565b6110ff81610d2e565b82525050565b600060408201905061111a600083018561108a565b61112760208301846110f6565b9392505050565b60008115159050919050565b6111438161112e565b811461114e57600080fd5b50565b6000815190506111608161113a565b92915050565b60006020828403121561117c5761117b610d24565b5b600061118a84828501611151565b91505092915050565b61119c81610d64565b82525050565b6000819050919050565b6111b5816111a2565b82525050565b60006080820190506111d060008301876110f6565b6111dd6020830186611193565b6111ea60408301856111ac565b6111f7606083018461108a565b95945050505050565b600067ffffffffffffffff82169050919050565b61121d81611200565b811461122857600080fd5b50565b60008151905061123a81611214565b92915050565b60006020828403121561125657611255610d24565b5b60006112648482850161122b565b91505092915050565b7f6f6e6c7947656c61746f52656c61790000000000000000000000000000000000600082015250565b60006112a3600f83610f69565b91506112ae8261126d565b602082019050919050565b600060208201905081810360008301526112d281611296565b9050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061131683856112d9565b93506113238385846112ea565b61132c836112f9565b840190509392505050565b6000604082019050818103600083015261135281868861130a565b9050818103602083015261136781848661130a565b905095945050505050565b600080fd5b600080fd5b600080858511156113905761138f611372565b5b838611156113a1576113a0611377565b5b6001850283019150848603905094509492505050565b600082905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600082821b905092915050565b600061140783836113b7565b8261141281356113c2565b925060048210156114525761144d7fffffffff00000000000000000000000000000000000000000000000000000000836004036008026113ee565b831692505b505092915050565b7f466f727761726465722e5f7265717569726553656c6563746f723a20696e766160008201527f6c69642073656c6563746f720000000000000000000000000000000000000000602082015250565b60006114b6602c83610f69565b91506114c18261145a565b604082019050919050565b600060208201905081810360008301526114e5816114a9565b9050919050565b60006114f883836113b7565b8261150381356111a2565b925060208210156115435761153e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836020036008026113ee565b831692505b505092915050565b6000819050919050565b611566611561826113c2565b61154b565b82525050565b600081905092915050565b6000611583838561156c565b93506115908385846112ea565b82840190509392505050565b60006115a88286611555565b6004820191506115b9828486611577565b9150819050949350505050565b7f47656c61746f52656c6179436f6e746578742e5f7472616e7366657252656c6160008201527f79466565436170706564455243323737313a206d617846656500000000000000602082015250565b6000611622603983610f69565b915061162d826115c6565b604082019050919050565b6000602082019050818103600083015261165181611615565b9050919050565b600081519050919050565b60005b83811015611681578082015181840152602081019050611666565b60008484015250505050565b600061169882611658565b6116a2818561156c565b93506116b2818560208601611663565b80840191505092915050565b60006116ca828461168d565b91508190509291505056fea264697066735822122072dc4d4b09a80741604e9f0b951a695c8ddfd87f4cf0be0f72491b056f35a26964736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
